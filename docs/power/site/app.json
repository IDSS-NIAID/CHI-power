[{"name":"app.R","content":"# simple power exploration app\n\n# build shiny app with shinylive (within the root directory)\n# shinylive::export('docs/power', 'docs/power/site')\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = 'Power analysis',\n  sidebar = sidebar(\n    # parameters for the illustration\n    title = 'Parameters',\n    sliderInput('typeI_error',                     'Significance level',        0.05 , min = 0.001, max = 0.1), # significance level\n    sliderInput(          'p', 'Cell death rates (unexposed / exposed)', c(0.2, 0.4 ), min = 0    , max = 1  ), # effect size\n    sliderInput('variability',                            'Variability',        0.1  , min = 0    , max = 1  ), # variability\n    numericInput(         'n',                            'Sample size',        5    , min = 2               ) # sample size\n  ),\n\n  card(\n    plotOutput('cell_death_rates'),\n    plotOutput('power')\n  )\n)\n\nserver <- function(input, output)\n{\n  calc_ab <- function(mean, variability = NULL, v = NULL)\n  {\n    if(is.null(v))\n      v <- mean * (1 - mean) * variability\n\n    # function to optimize\n    fn <- function(x) # x = c(alpha, beta)\n    {\n      crossprod(c(mu_beta(x[1], x[2]), sigma2_beta(x[1], x[2])) - c(mean, v))\n    }\n\n    retval <- optim(c(1, 1), fn)$par\n    names(retval) <- c('alpha', 'beta')\n\n    return(retval)\n  }\n\n  mu_beta <- function(alpha, beta)\n  {\n    retval <- alpha / (alpha + beta)\n    names(retval) <- 'mean'\n\n    return(retval)\n  }\n\n  sigma2_beta <- function(alpha, beta)\n  {\n    retval <- alpha * beta / ((alpha + beta)^2 * (alpha + beta + 1))\n    names(retval) <- 'variance'\n\n    return(retval)\n  }\n\n  # distribution of cell death rates\n  params_u <- reactive({calc_ab(input$p[1], variability = input$variability)})\n  params_e <- reactive({calc_ab(input$p[2], variability = input$variability)})\n\n  output$cell_death_rates <- renderPlot(\n    {\n      curves <- data.frame(x = seq(0.01, 0.99, length.out = 200))\n      curves$cntl <- dbeta(curves$x, params_u()[1], params_u()[2])\n      curves$case <- dbeta(curves$x, params_e()[1], params_e()[2])\n\n      plot(curves$x, curves$cntl, type = 'l', col = '#377EB8', lwd = 2, bty = 'l',\n           xlab = 'Cell death rate', ylab = 'Density', main = 'Distribution of cell death rates (truth / hidden)')\n\n      lines(curves$x, curves$case, col = '#E41A1C', lwd = 2)\n    })\n\n  # distribution of cell death rate statistics\n  output$power <- renderPlot({\n    # critical values\n    delta <- input$p[2] - input$p[1]\n    se <- sqrt(sigma2_beta(params_e()[1], params_e()[2]) / input$n +\n               sigma2_beta(params_u()[1], params_u()[2]) / input$n)\n    crit <- qnorm(1 - input$typeI_error / 2, sd = se)\n    mode <- dnorm(0, sd = se)\n    power <- pnorm(-crit, delta, se) + pnorm(crit, delta, se, lower.tail = FALSE)\n\n    # colors (one pair with transparency)\n    u_color <- '#377EB8'\n    u_color_trans <- rgb(55, 126, 184, maxColorValue = 255, alpha = 128)\n    e_color <- '#E41A1C'\n    e_color_trans <- rgb(228, 26, 28, maxColorValue = 255, alpha = 128)\n\n    # get plot limits\n    xlims <- c(qnorm(0.001, mean =    0, sd = se),\n               qnorm(0.001, mean = delta, sd = se),\n               qnorm(0.999, mean =    0, sd = se),\n               qnorm(0.999, mean = delta, sd = se)) |>\n      range()\n\n\n    # curves for null and alternate distributions\n    curves <- data.frame(x = seq(xlims[1], xlims[2], length.out = 200))\n    curves$cntl <- dnorm(curves$x, mean = 0, sd = se)\n    curves$case <- dnorm(curves$x, mean = delta, sd = se)\n\n    # curves for tails of each distribution\n    tails  <- data.frame(x_left  = c(xlims[1], seq(xlims[1],   -crit, length.out = 200),   -crit),\n                         x_right = c(   crit, seq(   crit, xlims[2], length.out = 200), xlims[2]))\n\n    tails$null_left  <- c(0, dnorm(tails$x_left[ -c(1,202)], mean = 0, sd = se), 0)\n    tails$null_right <- c(0, dnorm(tails$x_right[-c(1,202)], mean = 0, sd = se), 0)\n\n    tails$alt_left  <- c(0, dnorm(tails$x_left[ -c(1,202)], mean = delta, sd = se), 0)\n    tails$alt_right <- c(0, dnorm(tails$x_right[-c(1,202)], mean = delta, sd = se), 0)\n\n    # plot!! :)\n    plot(curves$x, curves$cntl, type = 'l', col = u_color, lwd = 2, bty = 'l',\n         xlab = 'Statistic', ylab = '', main = 'Distribution of cell death rate statistics (ovserved)',\n         ylim = c(0, 1.1*mode))\n    lines(curves$x, curves$case, col = e_color, lwd = 2)\n\n    polygon(tails$x_left,  tails$null_left,  col = u_color_trans, border = NA)\n    polygon(tails$x_right, tails$null_right, col = u_color_trans, border = NA)\n\n    polygon(tails$x_left,  tails$alt_left,   col = e_color_trans, border = NA)\n    polygon(tails$x_right, tails$alt_right,  col = e_color_trans, border = NA)\n\n    # add critical values\n    abline(v = -crit, col = 'black', lty = 2)\n    abline(v =  crit, col = 'black', lty = 2)\n\n    # add labels\n    reject_text_y <- 1.05*mode # y-value for placement of reject / fail to reject text and arrows\n\n    text(-crit - 0.03*diff(xlims), reject_text_y, 'Reject Ho', pos = 2)\n    arrows(-crit, reject_text_y, -crit - 0.03*diff(xlims), col = 'black', length = 0.1)\n\n    text( crit + 0.03*diff(xlims), reject_text_y, 'Reject Ho', pos = 4)\n    arrows( crit, reject_text_y,  crit + 0.03*diff(xlims), col = 'black', length = 0.1)\n\n    text(0, reject_text_y, 'Fail to reject Ho', pos = 3)\n    arrows(0, reject_text_y, -crit + 0.005*diff(xlims), reject_text_y, col = 'black', length = 0.08, angle = 90)\n    arrows(0, reject_text_y,  crit - 0.005*diff(xlims), reject_text_y, col = 'black', length = 0.08, angle = 90)\n\n    text(      - 0.5*se, reject_text_y - 0.1*mode,                       'Ho distribution', pos = 2, col = u_color)\n    text(delta + 0.5*se, reject_text_y - 0.1*mode, 'Ha distribution\\n(\"Truth / Expected\")', pos = 4, col = e_color)\n\n    text(  delta + 1.57*se, 0.55*mode,                  'Red area', pos = 2)\n    text(  delta + 1.5 *se, 0.55*mode,                   '= Power', pos = 4)\n    text(  delta + 1.5 *se, 0.5 *mode, paste('=', round(power, 2)), pos = 4)\n    arrows(delta + 1.5 *se, 0.5 *mode, delta + se, 0.3*mode, length = 0.1)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
